// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniBusCrm.DataAccess.Implementations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiniBusCrm.DataAccess.Migrations.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.BusDriverEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("text");

                    b.Property<string>("DocumentSerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BusDrivers");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.BusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.PassengerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.PlaneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PlaneName")
                        .HasColumnType("text");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.RouteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArrivalCity")
                        .HasColumnType("text");

                    b.Property<Guid?>("BusDriverId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartureCity")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("RouteName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusDriverId");

                    b.HasIndex("BusId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.TicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBaggage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PassengerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PlaneId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Seat")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("PlaneId");

                    b.HasIndex("RouteId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78993485-e953-4dbb-b939-fe9e684e6530"),
                            CreateDate = new DateTime(2021, 1, 18, 12, 19, 39, 995, DateTimeKind.Local).AddTicks(6738),
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Admin",
                            Password = "10.ioFD9w0SjwRA4DkHX0tHqg==.yLUtO8z+E0XrpTcC51+G8mfZm3dTR37dbtNYPGCt3e8=",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("f5802476-b465-443b-af72-c954a97c6f6c"),
                            CreateDate = new DateTime(2021, 1, 18, 12, 19, 39, 995, DateTimeKind.Local).AddTicks(9539),
                            FirstName = "Operator",
                            IsActive = true,
                            LastName = "Operator",
                            Password = "10.CklkfSFyQ8TnMgaToPThNQ==.Qbg+8BgQz1odxkIgq0IDsxyTgkr/2OsYJhDtMIU6WyQ=",
                            Role = "Operator",
                            Username = "oper"
                        });
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.PlaneEntity", b =>
                {
                    b.HasOne("MiniBusCrm.DataAccess.Contracts.Entities.RouteEntity", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.RouteEntity", b =>
                {
                    b.HasOne("MiniBusCrm.DataAccess.Contracts.Entities.BusDriverEntity", "BusDriver")
                        .WithMany()
                        .HasForeignKey("BusDriverId");

                    b.HasOne("MiniBusCrm.DataAccess.Contracts.Entities.BusEntity", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId");

                    b.Navigation("Bus");

                    b.Navigation("BusDriver");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.TicketEntity", b =>
                {
                    b.HasOne("MiniBusCrm.DataAccess.Contracts.Entities.PassengerEntity", "Passenger")
                        .WithMany("BusTickets")
                        .HasForeignKey("PassengerId");

                    b.HasOne("MiniBusCrm.DataAccess.Contracts.Entities.PlaneEntity", "Plane")
                        .WithMany("BusTickets")
                        .HasForeignKey("PlaneId");

                    b.HasOne("MiniBusCrm.DataAccess.Contracts.Entities.RouteEntity", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");

                    b.Navigation("Passenger");

                    b.Navigation("Plane");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.PassengerEntity", b =>
                {
                    b.Navigation("BusTickets");
                });

            modelBuilder.Entity("MiniBusCrm.DataAccess.Contracts.Entities.PlaneEntity", b =>
                {
                    b.Navigation("BusTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
